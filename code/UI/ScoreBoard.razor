@using System;
@using Sandbox;
@using Sandbox.UI;
@attribute [StyleSheet]
@inherits PanelComponent

<root class="@( Visible ? "visible" : "" )">

	@for (int i = 0; i < DisplayedEntryCount; i++)
	{
		ScoreBoardEntry e = Entries[i];

		string medal = MedalEmoji(i);

		string deltaPrefix = "∆";
		if (e.ScoreDelta > 0f) { deltaPrefix += " +"; }
		else if (e.ScoreDelta == 0f) { deltaPrefix += " ±"; }

		string deltaPosIcon = GetDeltaPositionIcon(i, e.PlayerName, out string deltaPlaceColor);

		bool dead = e.Lives <= 0;

		<div class="entry @(dead ? "dead" : "")">
			<div class="placing"> #@((i+1).ToString())</div>
			<div class="steamicon @(dead ? "dead" : "")" style="background-image: url( avatar:@e.SteamId ); transform: rotate(@(e.IsLocal ? ClientIconRotate : 0));" )">

				<div class="heartcontainer">
					@for(int j = 0; j < Player.MAX_HEALTH; j++)
					{
						<div class="heart">@(HeartEmoji(j, e.Lives))</div>
					}
				</div>

			</div>

			<div class="name">@(medal + " " + e.PlayerName)</div>
			<div class="score">@(e.Score.ToString("0,000"))</div>
			<div class="pts">₧</div>
			<div class="scoredelta" style="color: @(DeltaColor(e.ScoreDelta))">@(deltaPrefix + e.ScoreDelta.ToString("0,000"))</div>
			<div class="deltaicon" style="color: @(deltaPlaceColor)">@(deltaPosIcon)</div>
		</div>
	}

	<div class="dots">. . .</div>

</root>

@code
{
    const int MAX_DISPLAYED_ENTRIES = 10;

    [Sync] public static bool Visible { get; set; } = false;

    private static List<ScoreBoardEntry> OldEntries { get; set; }
    public static List<ScoreBoardEntry> Entries { get; private set; }

    float ClientIconRotate => MathF.Sin(Time.Now * 10) * 5;

    private int DisplayedEntryCount => (int)MathF.Min(Entries.Count, MAX_DISPLAYED_ENTRIES);

    private string HeartEmoji( int i, int lives )
    {
        return i >= lives ? "🖤" : "❤️";
    }

    private string MedalEmoji(int place)
    {
        switch(place)
        {
            case 0:
                return "🥇";
            case 1:
                return "🥈";
            case 2: return "🥉";
            default: return "";
        }
    }

    public static int GetPositioning(Player player)
    {
        if(Entries?.Count() == 0) { return 99; }

        Connection con = player.Network.OwnerConnection;
        ulong id = con.SteamId;

        if (!ScoreBoard.Entries.Exists(x => x.SteamId == id))
        {
            return 99;
        }

        IEnumerable<ScoreBoardEntry> ent = Entries.TakeWhile(x => x.SteamId != id);

        return ent.Count();

    }

    public ScoreBoard() {
        OldEntries = new();
        Entries = new();
    }

    private string DeltaColor(int delta)
    {
        if (delta < 0) { return Color.Red.Hex; }
        else if (delta == 0) { return Color.Yellow.Hex; }
        else { return Color.Green.Hex; }
    }

    private string GetDeltaPositionIcon( int place, string playerName, out string color )
    {
        int oldPlace = place; 

        if(OldEntries.Count > 0) {
            oldPlace = OldEntries.TakeWhile(x => x.PlayerName != playerName).Count();
        }

        int deltaPlace = oldPlace - place;

        string result = deltaPlace + " ▲";

        if(deltaPlace == 0) {
            result = "-";
        }
        else if(deltaPlace < 0) {
            result = MathF.Abs(deltaPlace) + " ▼";
        }

        color = DeltaColor(deltaPlace);
        return result;
    }

    [Broadcast]
    public static void Clear()
    {
        OldEntries.Clear();
        Entries.Clear();
    }


    protected override void OnStart()
    {
    }

    protected override void OnUpdate()
    {
    }

    [Broadcast]
    public static void Show()
    {
        Visible = true;
        Sound.Play("ui.navigate.forward");
    }

    [Broadcast]
    public static void Hide()
    {
        Visible = false;
        Sound.Play("ui.navigate.back");
    }

    protected override int BuildHash()
    {
        return System.HashCode.Combine( Time.Now );
    }

    [Broadcast]
    public static void Refresh()
    {
        OldEntries = new( Entries );
        Entries.Clear();

        IEnumerable<Player> players = PartyFacesManager.Players;
        int playerCount = players.Count();

        for (int i = 0; i < playerCount; i++)
        {
            Player p = players.ElementAt(i);
            Connection con = p.Network.OwnerConnection;

            ScoreBoardEntry entryOld = OldEntries.FirstOrDefault(x => x.PlayerName == con.DisplayName);
            int oldScore = entryOld.PlayerName == string.Empty ? 0 : entryOld.Score;

            Entries.Add(new ScoreBoardEntry(con.DisplayName, con.SteamId, p.Score, oldScore, p.Lives, !p.IsProxy));

            //ClientAddEntry( con.DisplayName, con.SteamId, p.Score, oldScore );

        }


        Entries = Entries.OrderBy(x => -x.Score).ToList();


        Show();

    }

    public static Player GetLeadingPlayer()
    {
        if(Entries?.Count == 0) { return null; }

        ScoreBoardEntry leaderEntry = Entries.MaxBy(x => x.Score);

        return PartyFacesManager.Players.FirstOrDefault(x => x.Network.OwnerConnection.SteamId == leaderEntry.SteamId, null);

    }

	protected override void OnDestroy()
	{
		Visible = false;
	}

	public struct ScoreBoardEntry
	{

		public string PlayerName;
		public ulong SteamId;

		public int Score;
		public int ScoreDelta;

		public int Lives;

		public bool IsLocal;

		public ScoreBoardEntry(string playerName, ulong steamId, int score, int oldScore, int lives, bool isLocal)
		{
			this.PlayerName = playerName;
			this.SteamId = steamId;

			this.Score = score;
			this.ScoreDelta = score - oldScore;

			this.Lives = lives;

			this.IsLocal = isLocal;
		}

	}

}
