@using System;
@using Sandbox;
@using Sandbox.UI;
@attribute [StyleSheet]
@inherits PanelComponent

<root>

	<div class="icon">@("⏰")</div>
    <div class="timer">@(TimeNowDisplay.ToString("0"))</div>

</root>

@code
{
    public const int ROUND_TIME = 15;

    [Sync] public static bool IsRunning { get; private set; } = false;

    [Sync] private static float TimeSinceStarted { get; set; } = 0;

    [Sync] private static float TargetTime { get; set; } = 0;

    public static float TimePrevious { get; private set; }
    public static float TimeNow => (TargetTime - TimeSinceStarted);
    public static float TimeNowDisplay => (MathF.Max(TimeNow, 0f) + 0.4f);

    public static Action OnTimerDepleted { get; set; }
    public static Action OnTimerStarted { get; set; }
    public static Action OnTimerStopped { get; set; }

    public LevelTimer() { }

    protected override void OnUpdate()
    {
        base.OnUpdate();

        if(IsRunning)
        {
            TimePrevious = TimeNow;
            TimeSinceStarted += Time.Delta;

            if ((int)TimePrevious != (int)TimeNow)
            {
                SecondChange( (int)TimeNow );
            }

            if (IsProxy) { return; }

            if(TimeNow <= 0f)
            {
                OnTimerDepleted?.Invoke();
                OnTimerStopped?.Invoke();
                IsRunning = false;
            }

        }

    }

    private void SecondChange(int newSecond)
    {

        switch(newSecond)
        {
            case 2:
                Sound.Play("sounds/countdown_3.sound");
                return;
            case 1: 
                Sound.Play("sounds/countdown_2.sound");
                return;
            case 0:
                Sound.Play("sounds/countdown_1.sound");
                return;
        }

    }

    [Rpc.Broadcast]
    public static void Start()
    {

        TargetTime = ROUND_TIME;
        TimeSinceStarted = 0;
        IsRunning = true;

        Sound.Play("sounds/timer_start.sound");

        OnTimerStarted?.Invoke();

    }

    [Rpc.Broadcast]
    public static void Stop()
    {
        if(!IsRunning) { return; }

        IsRunning = false;
        OnTimerStopped?.Invoke();
    }

	protected override void OnDestroy()
	{
		IsRunning = false;
		TimeSinceStarted = 0;
		TargetTime = 0;
	}

	protected override int BuildHash()
	{
		return System.HashCode.Combine(TimeNow);
	}
}
