@using Sandbox;
@using Sandbox.UI;
@using System;

@inherits PanelComponent

<root>

	@foreach (ScreenLabel l in Labels)
	{
		float x = (l.Position.x / Screen.Width);
		float y = (l.Position.y / Screen.Height);

		<div class="label @(l.Alive ? "alive " : "")" style="left: @(Length.Fraction(x)); top: @(Length.Fraction(y))">@(l.Text)</div>
	}

</root>

@code
{
    const float GRAVITY = 8.5f;


    public bool Visible { get; private set; } = true;

    private List<ScreenLabel> Labels { get; set; } = new();

    public TimeSince TimeSinceSpawn { get; private set; } = 0;

    protected override void OnStart()
    {
        TimeSinceSpawn = 0;

        base.OnStart();


    }

    float pitchHigh = 2f;
    float pitchLow = .2f;
    protected override void OnFixedUpdate()
    {

        base.OnFixedUpdate();

        for ( int i = Labels.Count - 1; i >= 0; i-- )
        {
            ScreenLabel l = Labels[i];

            l.Velocity.y += l.UseGravity ? GRAVITY : 0;
            l.Position += l.Velocity * Time.Delta;

            float pLife = l.TimeAlive / l.Life;
            float pitch = MathX.Remap(1 - pLife, 0, 1, pitchLow, pitchHigh);
            l.Sound.Pitch = pitch;
            l.Sound.Volume = pLife > 0.2f ? ( 1 - pLife ) * 0.25f : 0;

            if (l.Alive && l.TimeAlive > l.Life - 1)
            {
                l.Alive = false;
            }
            else if (l.TimeAlive > l.Life)
            {
                l.Sound.Stop();
                Labels.RemoveAt(i);	
            }

        }

        if( IsProxy ) { return; }

    }

    [Broadcast]
    public void SpawnLabel(string text, Vector2 startPosNormal, Vector2 velocity, bool useGravity, float life = 2)
    {
        SoundHandle handle = Sound.Play("sounds/label_fall.sound");
        Sound.Play("sounds/balloon_pop.sound");

        Vector2 pos = startPosNormal * Screen.Size;
        Labels.Add(new ScreenLabel(text, pos, velocity, useGravity, life, handle));
    }

    protected override int BuildHash()
    {
        return System.HashCode.Combine(Time.Now);
    }

    public class ScreenLabel
    {
        public bool Alive;

        public string Text;
        public Vector2 Position;
        public Vector2 Velocity;
        public bool UseGravity;
        public float Life;
        public TimeSince TimeAlive;
        public SoundHandle Sound;

        public ScreenLabel(string text, Vector2 startPos, Vector2 velocity, bool useGravity, float life, SoundHandle sound)
        {
            this.Text = text;
            this.Position = startPos;

            this.Velocity = velocity;
            this.Velocity.y *= -1;

            this.UseGravity = useGravity;
            this.Life = life;

            TimeAlive = 0;
            Alive = true;

            this.Sound = sound;

        }

	}

}
