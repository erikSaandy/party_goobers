@using Sandbox;
@using Sandbox.UI;
@using System;

@inherits PanelComponent

<root>
	<div class="header">@(Lobby.PlayersInLobby)/25 waiting@(Dots())</div>

	@*Nametags*@
	@for (int i = 0; i < Lobby.NPCs?.Count; i++)
	{
		GameObject npc = Scene.Directory.FindByGuid(Lobby.NPCs[i]);
		Connection con = npc.Network.OwnerConnection;

		Vector2 pos = NametagPosition(npc);

		<div class="nametag" style=" top: @(Length.Fraction(pos.y)); left: @(Length.Fraction(pos.x));">
			<div class="icon" style="background-image: url( avatar:@con.SteamId );" />
			<div class="name">@(con.DisplayName)</div>
		</div>
	}

	@*Start Button*@
	<div class="startbutton @(CanStartGame ? "" : "locked")" onclick="@OnClickedStartButton">
		Start Game
		</div>
</root>

@code
{
	[Property] public LobbyComponent Lobby { get; set; }

	[Property] public GameObject Emote { get; private set; }

	private TimeSince TimeAlive { get; set; }
	bool CanStartGame => TimeAlive > 2f;

	private Vector2 NametagPosition(GameObject npc)
	{
		return Scene.Camera.PointToScreenNormal(npc.Transform.Position + Vector3.Up * 112);
	}

	private string Dots()
	{
		int nr = (int)(((Time.Now * 1.5f)) % 3 );

		string s = ".";
		for(int i = 0; i < nr; i++) { s += "."; }

		return s;
	}

	protected override void OnAwake()
	{
		base.OnAwake();

		TimeAlive = 0;
	}

	private void OnClickedStartButton()
	{

		if(IsProxy) {

			SpawnEmoji(new Vector2(Mouse.Position.x / Screen.Width, Mouse.Position.y / Screen.Height));

			return;
		}

		PartyFacesManager.Instance.StartGame();

	}

	[Authority]
	private void SpawnEmoji( Vector2 screenPosNormal )
	{
		Vector2 screenPos = ( screenPosNormal + Vector2.Down * 0.1f) * Screen.Size;
		Ray ray = Scene.Camera.ScreenPixelToRay(screenPos);
		Vector3 pos = ray.Position + ( ray.Forward * 1024 );
		

		GameObject e = Emote.Clone(pos, Rotation.Identity);
		e.NetworkMode = NetworkMode.Object;
		e.NetworkSpawn();

	}

	protected override void OnUpdate()
	{
		base.OnUpdate();

	}

	protected override int BuildHash() 
	{
		return System.HashCode.Combine(Time.Now);
	}
}
