@using System
@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Menu;
@using System.Threading.Tasks;
@inherits Panel
@attribute [StyleSheet]


<root class="leaderboard-panel">

    @if (Loading)
    { 

        <div class="loading" style=" transform: rotate(@(LoadingRot)deg) " />
        @*<div class="loading" style="background: url(@img); transform: rotate(@(rot)deg)" />*@

        //style="transform: rotate(@(Tilt)deg);
        //style="background-image: url( avatar:@e.SteamId ); transform: rotate(@(e.IsLocal ? ClientIconRotate : 0))

    }
    else
    {

        <h2>@Board.DisplayName</h2>

        @foreach (var entry in Board?.Entries)
        {
            var c = entry.Me ? "me" : "";

            <div class="entry @c">
                <div class="rank">@entry.Rank</div>
                <div class="name">@entry.DisplayName</div>
                <div class="value">@entry.Value.ToString("n0")</div>
            </div>
        }

    }

</root>

@code
{
    public string BoardName { get; set; }
    public string Group { get; set; }

    private bool Loading => Board.TotalEntries <= 0;
    private float LoadingRot => ((Time.Now * 3) % MathF.Tau) * Saandy.Math2d.Rad2Deg;


    Sandbox.Services.Leaderboards.Board Board;

    RealTimeSince timeSinceUpdated;

    protected override async Task OnParametersSetAsync()
    {
        Board = Sandbox.Services.Leaderboards.Get(BoardName);
        Board.MaxEntries = 20;
        Board.Group = Group;

        await UpdateScores();
    }

    public override void Tick()
    {
        base.Tick();

        if (timeSinceUpdated > 2)
        {
            _ = UpdateScores();
        }
    }

    async Task UpdateScores()
    {
        timeSinceUpdated = 0;
        await Board.Refresh();
    }

    protected override int BuildHash()
    {
        return System.HashCode.Combine(Board?.Entries, Loading ? LoadingRot : 0f);
    }

}
